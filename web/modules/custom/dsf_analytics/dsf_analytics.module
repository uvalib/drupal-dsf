<?php

/**
 * @file
 * Contains dsf_analytics.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function dsf_analytics_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.dsf_analytics':
      return '<p>' . t('DSF Analytics Dashboard provides insights into how users interact with the Digital Service Finder.') . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function dsf_analytics_theme() {
  return [
    'dsf_analytics_dashboard' => [
      'variables' => [
        'matomo_enabled' => FALSE,
        'matomo_site_id' => NULL,
        'matomo_url' => NULL,
        'dsf_tracking_enabled' => FALSE,
        'data_mode' => 'mock',
        'can_administer' => FALSE,
      ],
      'template' => 'dsf-analytics-dashboard',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function dsf_analytics_page_attachments(array &$attachments) {
  $config = \Drupal::config('dsf_analytics.settings');
  $matomo_enabled = $config->get('matomo_enabled') ?? FALSE;
  
  // Convert string boolean values to actual booleans
  if (is_string($matomo_enabled)) {
    $matomo_enabled = in_array(strtolower($matomo_enabled), ['1', 'true', 'yes', 'on'], true);
  }
  
  
  if (!$matomo_enabled) {
    return;
  }
  
  // Only attach Matomo tracking to specific pages
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  
  // Get configurable DSF pages
  $dsf_pages_config = $config->get('dsf_pages') ?? "/dsf\n/digital-service-finder\n/services\n/find-services\n/finder\n/";
  // Handle both literal \n and actual newlines
  $dsf_pages_config = str_replace('\\n', "\n", $dsf_pages_config);
  $dsf_pages = array_filter(array_map('trim', explode("\n", $dsf_pages_config)));
  
  // Check if current page is a DSF page
  $is_dsf_page = FALSE;
  
  // Also check the route name for front page
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();
  
  // Special case for front page that might be the DSF finder
  if ($route_name === 'view.dsf_services.page_1' || $route_name === 'entity.node.canonical') {
    $is_dsf_page = TRUE;
  }
  
  // Check if this is the front page and it's set to a DSF path
  if ($current_path === '/' || $current_path === '') {
    $front_page = \Drupal::config('system.site')->get('page.front');
    if ($front_page) {
      $front_page_clean = ltrim($front_page, '/');
      foreach ($dsf_pages as $dsf_path) {
        $dsf_path_clean = ltrim($dsf_path, '/');
        if ($front_page_clean === $dsf_path_clean || strpos($front_page_clean, $dsf_path_clean) === 0) {
          $is_dsf_page = TRUE;
          break;
        }
      }
    }
  }
  
  foreach ($dsf_pages as $dsf_path) {
    // Remove leading slash for comparison
    $dsf_path_clean = ltrim($dsf_path, '/');
    $current_path_clean = ltrim($current_path, '/');
    $path_alias_clean = ltrim($path_alias, '/');
    
    if ($path_alias_clean === $dsf_path_clean || $current_path_clean === $dsf_path_clean ||
        strpos($path_alias_clean, $dsf_path_clean) === 0 || strpos($current_path_clean, $dsf_path_clean) === 0) {
      $is_dsf_page = TRUE;
      break;
    }
  }
  
  // Also check for DSF-related content types
  if ($route_match->getRouteName() == 'entity.node.canonical') {
    $node = $route_match->getParameter('node');
    if ($node) {
      $content_types_config = $config->get('content_types') ?? 'service,dsf_service,digital_service';
      $content_types = array_filter(array_map('trim', explode(',', $content_types_config)));
      
      if (in_array($node->getType(), $content_types)) {
        $is_dsf_page = TRUE;
      }
    }
  }
  
  // Attach libraries if this is a DSF-related page
  if ($is_dsf_page) {
    $attachments['#attached']['library'][] = 'dsf_analytics/matomo_complete';
    
    // Pass configuration to JavaScript
    $attachments['#attached']['drupalSettings']['dsfAnalytics'] = [
      'matomo' => [
        'enabled' => TRUE,
        'siteId' => $config->get('matomo_site_id') ?? 1,
        'url' => $config->get('matomo_url') ?? 'https://vah-analytics.lib.virginia.edu/',
        'trackingMode' => $config->get('tracking_mode') ?? 'PROD',
      ],
      'dataMode' => $config->get('data_mode') ?? 'mock',
      'labels' => _dsf_analytics_get_dynamic_labels(),
    ];
  }
}

/**
 * Get dynamic labels from Drupal content for analytics tracking.
 * 
 * This function pulls labels from your actual content instead of hardcoding them.
 * This ensures labels stay current as your services and facets change.
 */
function _dsf_analytics_get_dynamic_labels() {
  $labels = [
    'facetTypes' => [],
    'serviceNames' => [],
    'investigationTypes' => [],
  ];
  
  try {
    // Get facet types from taxonomy terms or field configurations
    $labels['facetTypes'] = _dsf_analytics_get_facet_type_labels();
    
    // Get service names from actual service nodes
    $labels['serviceNames'] = _dsf_analytics_get_service_labels();
    
    // Get investigation types from configuration or content
    $labels['investigationTypes'] = _dsf_analytics_get_investigation_type_labels();
    
  } catch (\Exception $e) {
    \Drupal::logger('dsf_analytics')->error('Error getting dynamic labels: @message', ['@message' => $e->getMessage()]);
    
    // Fallback to basic labels if there's an error
    $labels = [
      'facetTypes' => [
        'facet-1' => 'Storage_Type',
        'facet-2' => 'Data_Size', 
        'facet-3' => 'Security_Level',
        'facet-4' => 'Access_Type',
        'facet-5' => 'Cost_Model',
      ],
      'serviceNames' => [],
      'investigationTypes' => [
        'details_view' => 'Details_View',
        'added_to_comparison' => 'Added_To_Comparison',
        'removed_from_comparison' => 'Removed_From_Comparison',
        'external_link_click' => 'External_Link_Click',
        'deep_dive' => 'Deep_Dive',
        'quick_view' => 'Quick_View',
      ],
    ];
  }
  
  return $labels;
}

/**
 * Get facet type labels from taxonomy or field configurations.
 */
function _dsf_analytics_get_facet_type_labels() {
  $facet_types = [];
  
  // Try to get facet types from taxonomy terms
  $vocabularies = ['facet_types', 'service_facets', 'dsf_facets'];
  
  foreach ($vocabularies as $vid) {
    try {
      $terms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['vid' => $vid]);
      
      foreach ($terms as $term) {
        $machine_name = $term->get('field_machine_name')->value ?? 
                       strtolower(str_replace(' ', '_', $term->getName()));
        $facet_types[$machine_name] = $term->getName();
      }
    } catch (\Exception $e) {
      // Vocabulary doesn't exist, continue
      continue;
    }
  }
  
  // Fallback to field-based facet detection
  if (empty($facet_types)) {
    $facet_types = _dsf_analytics_get_field_based_facet_types();
  }
  
  return $facet_types;
}

/**
 * Get facet types from field configurations.
 */
function _dsf_analytics_get_field_based_facet_types() {
  $facet_types = [];
  
  // Look for fields that might be facets on service content types
  $content_types = ['service', 'dsf_service', 'digital_service'];
  
  foreach ($content_types as $content_type) {
    try {
      $fields = \Drupal::entityTypeManager()
        ->getStorage('field_config')
        ->loadByProperties(['bundle' => $content_type]);
      
      foreach ($fields as $field) {
        $field_name = $field->getName();
        $field_label = $field->getLabel();
        
        // Check if this looks like a facet field
        if (strpos($field_name, 'facet') !== FALSE || 
            strpos($field_name, 'filter') !== FALSE ||
            strpos($field_name, 'category') !== FALSE) {
          
          $machine_name = str_replace('field_', '', $field_name);
          $facet_types[$machine_name] = $field_label;
        }
      }
    } catch (\Exception $e) {
      // Content type doesn't exist, continue
      continue;
    }
  }
  
  return $facet_types;
}

/**
 * Get service labels from actual service nodes.
 */
function _dsf_analytics_get_service_labels() {
  $service_labels = [];
  
  $content_types = ['service', 'dsf_service', 'digital_service'];
  
  foreach ($content_types as $content_type) {
    try {
      $nodes = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadByProperties([
          'type' => $content_type,
          'status' => 1, // Only published nodes
        ]);
      
      foreach ($nodes as $node) {
        $service_id = $node->id();
        $service_name = $node->getTitle();
        
        if ($service_name) {
          $service_labels[$service_id] = $service_name;
        }
      }
    } catch (\Exception $e) {
      // Content type doesn't exist, continue
      continue;
    }
  }
  
  return $service_labels;
}

/**
 * Get investigation type labels from configuration.
 */
function _dsf_analytics_get_investigation_type_labels() {
  $config = \Drupal::config('dsf_analytics.settings');
  $investigation_types = $config->get('investigation_types') ?? [];
  
  // If not configured, return defaults
  if (empty($investigation_types)) {
    return [
      'details_view' => 'Details_View',
      'added_to_comparison' => 'Added_To_Comparison',
      'removed_from_comparison' => 'Removed_From_Comparison',
      'external_link_click' => 'External_Link_Click',
      'deep_dive' => 'Deep_Dive',
      'quick_view' => 'Quick_View',
    ];
  }
  
  return $investigation_types;
}
